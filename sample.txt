const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const { default: router } = require('./routes/routes');
const app = express();
const server = http.createServer(app);
const io = new Server(server);
const mongoose = require("mongoose");
const dbconnect = require("./database/dbconnect.js");
const routers = require("./routes/routes.js");
const cookieParser = require("cookie-parser");


// username -> socketId map
const users = {};

app.use(express.json());
app.use(cookieParser());

dbconnect().then(() => {
    console.log("successfully executed db connection");
})
    .catch((err) => {
        console.log("some error occured.", err);
    })


io.use((socket, next) => {
    const token = socket.handshake.auth.token;

    if (!token) {
        return next(new Error('Authentication token missing'));
    }

    try {
        const user = jwt.verify(token, 'secret_key');
        socket.user = user; // Attach user data to socket
        next();
    } catch (err) {
        next(new Error('Authentication failed'));
    }
});


app.use(express.static('public'));

io.on('connection', (socket) => {
    console.log('User connected:', socket.id);

    // Save username with socket ID
    socket.on('register', (username) => {
        users[username] = socket.id;
        console.log(`${username} registered with socket ID ${socket.id}`);
    });

    // Handle private message
    socket.on('private message', ({ to, message, from }) => {
        const targetSocketId = users[to];
        if (targetSocketId) {
            io.to(targetSocketId).emit('private message', { message, from });
        }
    });

    // Cleanup on disconnect
    socket.on('disconnect', () => {
        for (const username in users) {
            if (users[username] === socket.id) {
                delete users[username];
                console.log(`${username} disconnected`);
                break;
            }
        }
    });
});

app.use("/api", routers);

server.listen(3000, () => {
    console.log('Server running on http://localhost:5000');
});











-------------------------------------
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.static('public'));

// username -> socketId map
const users = {};

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  // Save username with socket ID
  socket.on('register', (username) => {
    users[username] = socket.id;
    console.log(`${username} registered with socket ID ${socket.id}`);
  });

  // Handle private message
  socket.on('private message', ({ to, message, from }) => {
    const targetSocketId = users[to];
    if (targetSocketId) {
      io.to(targetSocketId).emit('private message', { message, from });
    }
  });

  // Cleanup on disconnect
  socket.on('disconnect', () => {
    for (const username in users) {
      if (users[username] === socket.id) {
        delete users[username];
        console.log(`${username} disconnected`);
        break;
      }
    }
  });
});

server.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});